#!/usr/bin/env ts-node
/* =============================================================================
 * Spyro SDK – Query Models Example
 * ---------------------------------------------------------------------------
 * Fetches the top‑N AI‑Models ranked by reputation score via Spyro‑Node’s
 * GraphQL endpoint and prints a table to stdout. Demonstrates low‑level GQL
 * query helper bundled in the SDK.
 *
 *    $ ts-node examples/query-models.ts --endpoint https://node.spyro.ai/graphql
 * ===========================================================================*/
import { GQL } from "../dist/graphql/queries"; // generated barrel after build
import { GraphQLClient } from "graphql-request";
import { print } from "graphql";
import yargs from "yargs";
import { hideBin } from "yargs/helpers";
import { reputationFromScore } from "../src/utils/format";

async function main() {
  // ── CLI args ──────────────────────────────────────────────────────────────
  const argv = await yargs(hideBin(process.argv))
    .option("endpoint", {
      type: "string",
      default: "http://localhost:8000/graphql",
      describe: "Spyro‑Node GraphQL endpoint",
    })
    .option("limit", {
      type: "number",
      default: 5,
      describe: "Number of top models to print",
    })
    .parse();

  const client = new GraphQLClient(argv.endpoint);

  // ── Build query (typed) ───────────────────────────────────────────────────
  const query = GQL.TopModels; // auto‑generated by graphql‑codegen
  const variables = { first: argv.limit };

  const data = await client.request(query, variables);

  console.log(`Top ${argv.limit} models by reputation:`);
  console.log("-----------------------------------------");
  console.table(
    data.models.map((m: any, idx: number) => ({
      Rank: idx + 1,
      Model: m.id,
      Provider: m.provider.id,
      Reputation: m.reputation.toFixed(4),
      Version: m.currentVersion,
      Params: m.params,
    }))
  );
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
